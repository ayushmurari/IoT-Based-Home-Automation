/*************************************************************
Title         :   Home automation using blynk
Description   :   To control light's brigntness with brightness,monitor temperature , monitor water level in the tank through blynk app
Pheripherals  :   Arduino UNO , Temperature system, LED, LDR module, Serial Tank, Blynk cloud, Blynk App.
 *************************************************************/

// Template ID, Device Name and Auth Token are provided by the Blynk.Cloud
// See the Device Info tab, or Template settings
#define BLYNK_TEMPLATE_ID "TMPLpoHnb3fX"
#define BLYNK_DEVICE_NAME "Home Automation"
#define BLYNK_AUTH_TOKEN "***********************"


// Comment this out to disable prints 
//#define BLYNK_PRINT Serial

#include <SPI.h>
#include <Ethernet.h>
#include <BlynkSimpleEthernet.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#include "main.h"
#include "temperature_system.h"
#include "ldr.h"
#include "serial_tank.h"

char auth[] = BLYNK_AUTH_TOKEN;
bool heater_sw,inlet_sw,outlet_sw;
unsigned int tank_volume;

BlynkTimer timer;

LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display

// This function is called every time the Virtual Pin 0 state changes

/*To turn ON and OFF cooler based virtual PIN value*/
BLYNK_WRITE(COOLER_V_PIN)
{
  int value =  param.asInt();
  if(value){
    cooler_control(ON);
    lcd.setCursor(8,0);
    lcd.print("COOL_ON ");
  }
  else{
    cooler_control(OFF);
    lcd.setCursor(8,0);
    lcd.print("COOL_OFF");
  }
}

/*To turn ON and OFF heater based virtual PIN value*/
BLYNK_WRITE(HEATER_V_PIN )
{
  heater_sw =  param.asInt();
   if(heater_sw){
    heater_control(ON);
    lcd.setCursor(8,0);
    lcd.print("HEAT_ON ");
  }
  else{
    heater_control(OFF);
    lcd.setCursor(8,0);
    lcd.print("HEAT_OFF");
  }
}


/*To turn ON and OFF inlet vale based virtual PIN value*/
BLYNK_WRITE(INLET_V_PIN)
{
  // reading the value present on the virtual pin INLET_V_PIN and storing it in inlet_sw//
  inlet_sw=  param.asInt();
  if(inlet_sw){
    enable_inlet();
    lcd.setCursor(7,1);
    lcd.print("INLET_ON ");
  }
  else{
    disable_inlet();
   lcd.setCursor(7,1);
    lcd.print("INLET_OFF");
  }
}
/*To turn ON and OFF outlet value based virtual switch value*/
BLYNK_WRITE(OUTLET_V_PIN)
{
  outlet_sw=  param.asInt();
  if(outlet_sw){
    enable_outlet();
    lcd.setCursor(7,1);
    lcd.print("OTLET_ON ");
  }
  else{
    disable_outlet();
    lcd.setCursor(7,1);
    lcd.print("OTLET_OFF");
  }
}
///* To display temperature and water volume as gauge on the Blynk App*/
  
void update_temperature_reading()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.

  // sending temperature reading to temperature gauge for every one sec
  Blynk.virtualWrite(TEMPERATURE_GAUGE,read_temperature());

  // sending volume of water in the tank for every one second using volume gauge
  Blynk.virtualWrite(WATER_VOL_GAUGE ,volume());
 
  
}

///*To turn off the heater if the temperature raises above 35 deg C*/
void handle_temp(void)
{
  if(read_temperature()> float(35) && heater_sw){
    heater_sw=0;
    heater_control(OFF);
    lcd.setCursor(8,0);
    lcd.print("HEAT_OFF");
    // send nortification to Blynk app
    Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"Temperature is above 35 degree celcius\n");
     Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"turning the heater off\n");
     // to turn off heater widge button
     Blynk.virtualWrite(HEATER_V_PIN,0);
  }
  
}
//
/*To control water volume above 2000ltrs*/
void handle_tank(void)
{
  // vol<2000 and inlet valve is off
  if((tank_volume<2000) && (inlet_sw==0)){
    enable_inlet();
    inlet_sw=1;
    lcd.setCursor(7,1);
    lcd.print("INLET_ON ");
    // to print nortification on blynk iot app //
     Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"Volume is less than 2000 L\n");
     Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"Water Inlet enable\n");
     // reflect the status on the widget button of inlet valve //
     Blynk.virtualWrite(INLET_V_PIN ,1);
  }
  // if vol =3000 and inlet valve is on  then disable inlet
  if((tank_volume==3000)&& (inlet_sw==1))
  {
    disable_inlet();
     inlet_sw=0;
    lcd.setCursor(7,1);
    lcd.print("INLET_OFF");
    // to print nortification on blynk iot app //
     Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"Volume is Full\n");
     Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN,"Water Inlet disabled\n");
     // reflect the status on the widget button of inlet valve //
     Blynk.virtualWrite(INLET_V_PIN ,0);
    
  }
  
  

}


void setup(void)
{
    Blynk.begin(auth);
     lcd.init();                     
    lcd.backlight();
    lcd.clear();
    lcd.home();
    
    /*To display temperature*/
    lcd.setCursor(0, 0);
    lcd.print("T="); 
    /*To display volume of water*/
    lcd.setCursor(0, 1);
    lcd.print("V=");
    
    
    init_temperature_system();  // initialisation temp system
    init_ldr();
    init_serial_tank();  
    
    // update temperature to Blynk app for every one second 
    timer.setInterval(1000L,update_temperature_reading);
}

void loop(void) 
{
      // to run blynk related function
      Blynk.run();
      // to call setinterval at particular period
      timer.run();
      // read temp and display on clcd
      String temperature;
      temperature = String(read_temperature(),2); // 28.38   -->> 28
      lcd.setCursor(2, 0);
      lcd.print(temperature);
      
      // read volume of water in the tank and display on clcd
      tank_volume= volume();
       lcd.setCursor(2, 1);
      lcd.print(tank_volume);
     // to control the garden lights based on light intensity 
      brightness_control();
      // to control threshold temp 35 deg celcius
      handle_temp();
      // to control vol of water in tank
      handle_tank();
}